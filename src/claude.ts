import * as core from '@actions/core'
import { Anthropic } from '@anthropic-ai/sdk'
import { PRContext } from './types.js'

/**
 * System prompt for Claude to generate PR descriptions
 */
const SYSTEM_PROMPT = `
You are a technical writer creating clear, concise pull request descriptions. 

Your task is to analyze the provided PR context and generate a professional GitHub PR description in markdown format.

Structure your response exactly like this:

----------------------------------------------------------------------

## Summary
Brief overview of what this PR does (1-2 sentences)

## Changes Made  
- Key changes in bullet points (be specific but concise)

----------------------------------------------------------------------

Do not include any other sections or comments in your response.

Guidelines:
- Be concise. Prefer to be short and to the point.
- Focus on the "what" and "why", not implementation details
- Use clear, professional language
- Highlight breaking changes if any
- Mention related issues if apparent from commits

Respond with ONLY the markdown content - no meta-commentary.
`

export async function generatePRDescription(
  apiKey: string,
  prContext: PRContext
): Promise<string> {
  const anthropic = new Anthropic({
    apiKey
  })

  const contextContent = `Pull Request Title: ${prContext.prInfo.title}
Pull Request Author: ${prContext.prInfo.author}

Commit Messages:
${prContext.commitMessages}

Complete Code Diff:
${prContext.diff}`

  core.info('Generating PR description with Claude...')
  core.info(`Context size: ${contextContent.length} characters`)
  core.info(
    `Commit messages found: ${prContext.commitMessages.trim().split('\n').length} commits`
  )
  core.info(`Diff lines: ${prContext.diff.split('\n').length} lines`)

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-5-haiku-latest',
      max_tokens: 1000,
      temperature: 0.3,
      system: [
        {
          type: 'text',
          text: SYSTEM_PROMPT,
          cache_control: { type: 'ephemeral' }
        }
      ],
      messages: [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: 'Please analyze this pull request and generate a description:\n\n'
            },
            {
              type: 'text',
              text: contextContent,
              cache_control: { type: 'ephemeral' }
            }
          ]
        }
      ]
    })

    const description =
      response.content &&
      response.content[0] &&
      response.content[0].type === 'text'
        ? response.content[0].text
        : ''

    if (description) {
      core.info('Generated PR description successfully')
      core.info(
        `Token usage: input=${response.usage.input_tokens}, output=${response.usage.output_tokens}`
      )

      if (
        response.usage.cache_read_input_tokens &&
        response.usage.cache_read_input_tokens > 0
      ) {
        core.info(
          `Cache hit! Saved tokens: ${response.usage.cache_read_input_tokens}`
        )
        const cacheHitRate = Math.round(
          (response.usage.cache_read_input_tokens /
            (response.usage.cache_read_input_tokens +
              response.usage.input_tokens)) *
            100
        )
        core.info(`Cache hit rate: ${cacheHitRate}%`)
      }

      return description
    } else {
      throw new Error('Empty description generated by Claude')
    }
  } catch (error) {
    throw new Error(`Failed to generate description with Claude: ${error}`)
  }
}
